package gui;

import utils.CSVReader;
import utils.GradedClass;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.lang.reflect.Array;
import java.rmi.server.ExportException;
import java.util.ArrayList;
import java.util.List;

public class CourseSelection extends JPanel {
    private JPanel coursePanel;
    private JButton addCourseButton;
    private JButton editCourseButton;
    private JButton logoutButton;
    private JPanel courseActions;
    private JPanel courseTiles;
    private JPanel spacer;
    private JLabel semester;

    private final List<CourseTile> tiles;
    private boolean isLoggedIn;

    private List<GradedClass> courses;

    private int count = 0;

    public CourseSelection() {

        this.isLoggedIn = true;
        tiles = new ArrayList<>();
        courses = new ArrayList<>();
        $$$setupUI$$$();
        addCourseButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fileChooser.setDialogTitle("Select a CSV file");
            String filePath = "";
            int result = fileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                filePath = fileChooser.getSelectedFile().getAbsolutePath();
            }
            addCourse(filePath);
            count++;
            System.out.println(tiles.size() + " courses added");

            courseTiles.removeAll();

            for (CourseTile ct : tiles) {
                courseTiles.add(ct.getTilePanel());
//                    courseTiles.add(new JLabel("This is a Course"));
            }

            courseTiles.revalidate();
            courseTiles.updateUI();
            firePropertyChange("GUIupdate", 0, 0);
        });
        editCourseButton.addActionListener(e -> {
            System.out.println(tiles.size() + " courses left");

            if (tiles.size() > 0) {
                deleteCourse(0);
            }

            courseTiles.revalidate();
            courseTiles.updateUI();
            firePropertyChange("GUIupdate", 0, 0);

        });
        logoutButton.addActionListener(e -> loggout());

    }

    private void addCourse(String filePath) {
        try {
            GradedClass course = CSVReader.loadCSV(filePath);
            courses.add(course);
        } catch (Exception e) {
            System.out.println("Cannot read from" + filePath);
        }
        CourseTile ct = new CourseTile(courses.get(courses.size() - 1).toString(), tiles.size());
        ct.addPropertyChangeListener(evt -> {
            System.out.println("notified course selection page");
            if (evt.getPropertyName().equals("isSelected")) {
                firePropertyChange("CourseSelected", null, courses.get((int) evt.getNewValue()));
            }
        });

        tiles.add(ct);
    }

    private void deleteCourse(int idx) {
        CourseTile ct = tiles.remove(idx);
        courseTiles.remove(ct.getTilePanel());
        courses.remove(idx);
    }

    private void loggout() {
        this.isLoggedIn = false;
        firePropertyChange("isLoggedIn", true, false);
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        courseTiles = new JPanel(new GridLayout(0, 4));
        courseTiles.setBorder(new EmptyBorder(0, 30, 0, 0));
    }

    public void setSemesterLabel(String semesterLabel) {
        semester.setText(semesterLabel);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        coursePanel = new JPanel();
        coursePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        coursePanel.add(courseTiles, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        coursePanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        spacer = new JPanel();
        spacer.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(spacer, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        spacer.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(100, 100), null, null, 0, false));
        semester = new JLabel();
        semester.setText("");
        spacer.add(semester, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        courseActions = new JPanel();
        courseActions.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(0, 30, 0, 30), -1, -1));
        panel1.add(courseActions, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addCourseButton = new JButton();
        addCourseButton.setText("Add Course");
        courseActions.add(addCourseButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        editCourseButton = new JButton();
        editCourseButton.setText("Delete Course");
        courseActions.add(editCourseButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logoutButton = new JButton();
        logoutButton.setText("Logout");
        courseActions.add(logoutButton, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return coursePanel;
    }
}
